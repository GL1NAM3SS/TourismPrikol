// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tourism;

#nullable disable

namespace Tourism.Migrations
{
    [DbContext(typeof(TourismDbContext))]
    [Migration("20240417122641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tourism.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("MainPhoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Tourism.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Tourism.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Tourism.GuideTour", b =>
                {
                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasIndex("GuideId");

                    b.HasIndex("TourId");

                    b.ToTable("GuideTours");
                });

            modelBuilder.Entity("Tourism.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("GuideId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("GuideId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tourism.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("TourId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Tourism.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Tourism.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"));

                    b.Property<int?>("AvaibleTickets")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("MainPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartPointGeo")
                        .HasColumnType("text");

                    b.Property<string>("StartPointName")
                        .HasColumnType("text");

                    b.HasKey("TourId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tourism.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuide")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProfilePhoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tourism.City", b =>
                {
                    b.HasOne("Tourism.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Cities_Regions");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Tourism.Comment", b =>
                {
                    b.HasOne("Tourism.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK_Comments_Comments");

                    b.HasOne("Tourism.Tour", "Tour")
                        .WithMany("Comments")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Comments_Tours");

                    b.HasOne("Tourism.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comments_Users");

                    b.Navigation("ParentComment");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourism.GuideTour", b =>
                {
                    b.HasOne("Tourism.User", "Guide")
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .IsRequired()
                        .HasConstraintName("FK_GuideTours_Users");

                    b.HasOne("Tourism.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK_GuideTours_Tours");

                    b.Navigation("Guide");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourism.Order", b =>
                {
                    b.HasOne("Tourism.User", "Guide")
                        .WithMany("OrderGuides")
                        .HasForeignKey("GuideId")
                        .HasConstraintName("FK_Orders_Users1");

                    b.HasOne("Tourism.Tour", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Orders_Tours");

                    b.HasOne("Tourism.User", "User")
                        .WithMany("OrderUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Orders_Users");

                    b.Navigation("Guide");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourism.Photo", b =>
                {
                    b.HasOne("Tourism.Tour", "Tour")
                        .WithMany("Photos")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Photos_Tours");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourism.Tour", b =>
                {
                    b.HasOne("Tourism.Category", "Category")
                        .WithMany("Tours")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Tours_Categories");

                    b.HasOne("Tourism.City", "City")
                        .WithMany("Tours")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Tours_Cities");

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Tourism.Category", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tourism.City", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tourism.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("Tourism.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Tourism.Tour", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Tourism.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderGuides");

                    b.Navigation("OrderUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
